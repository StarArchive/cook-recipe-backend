generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  children Category[] @relation("SubCategoryToParentCategory")

  parentId Int?
  parent   Category? @relation("SubCategoryToParentCategory", fields: [parentId], references: [id])

  recipeIngredient RecipeIngredient[]
}

model Ingredient {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Recipe {
  id          Int                @id @default(autoincrement())
  title       String             @db.VarChar(255)
  description String?
  published   Boolean            @default(false)
  images      String[]
  ingredients RecipeIngredient[]
  steps       RecipeStep[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [id])
}

model RecipeIngredient {
  id       Int     @id @default(autoincrement())
  order    Int
  name     String
  quantity String?

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  recipeId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@index([recipeId, order])
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  avatar String?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  nickname  String?
  email     String   @unique
  password  String
  roles     Role[]   @default([USER])
  profile   Profile?
  recipes   Recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecipeStep {
  recipeId Int
  order    Int
  content  String

  images String[]
  recipe Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([recipeId, order], map: "recipeId_order_unique")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}
